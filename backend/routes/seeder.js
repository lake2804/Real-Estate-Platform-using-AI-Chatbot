const express = require('express')
const router = express.Router()

// Corrected User import, other .cjs models are as per their original naming
const User = require('../models/User.js')
const Property = require('../models/Property.cjs')
const FeaturedProject = require('../models/FeaturedProject.cjs')
const News = require('../models/News.cjs')

// POST /api/seed/run - Run database seeder
router.post('/run', async (req, res) => {
  try {
    console.log('üå± Starting database seeding...')
    
    // Clear existing data
    await Promise.all([
      User.deleteMany({}),
      Property.deleteMany({}),
      FeaturedProject.deleteMany({}),
      News.deleteMany({})
    ])
    
    console.log('üóëÔ∏è Cleared existing data')

    // Seed Users
    const users = await User.insertMany([
      {
        fullName: 'Admin User',
        email: 'admin@example.com',
        password: 'password123',
        role: 'admin',
        phone: '0901234567',
        isActive: true,
        emailVerified: true
      },
      {
        fullName: 'Agent Nguy·ªÖn VƒÉn A',
        email: 'agent1@example.com',
        password: 'password123',
        role: 'agent',
        phone: '0902345678',
        isActive: true,
        emailVerified: true
      },
      {
        fullName: 'User Tr·∫ßn Th·ªã B',
        email: 'user1@example.com',
        password: 'password123',
        role: 'user',
        phone: '0903456789',
        isActive: true,
        emailVerified: true
      }
    ])

    console.log(`‚úÖ Seeded ${users.length} users`)

    // ‚úÖ Seed Properties - FIXED based on schema
    const properties = []
    for (let i = 1; i <= 50; i++) {
      properties.push({
        title: `CƒÉn h·ªô cao c·∫•p ${i}`,
        description: `M√¥ t·∫£ chi ti·∫øt cƒÉn h·ªô s·ªë ${i} v·ªõi ƒë·∫ßy ƒë·ªß ti·ªán nghi hi·ªán ƒë·∫°i.`,
        price: Math.floor(Math.random() * 10000000000) + 1000000000,
        
        // ‚úÖ FIXED: Based on schema structure
        location: {
          address: `ƒê·ªãa ch·ªâ ${i}, Qu·∫≠n ${Math.floor(Math.random() * 12) + 1}`,
          district: `Qu·∫≠n ${Math.floor(Math.random() * 12) + 1}`,
          city: Math.random() > 0.5 ? 'TP.HCM' : 'H√† N·ªôi',
          coordinates: {
            lat: 10.7 + Math.random() * 0.1,
            lng: 106.7 + Math.random() * 0.1
          }
        },
        
        // ‚úÖ FIXED: Use valid enum values
        type: Math.random() > 0.5 ? 'sale' : 'rent',
        category: ['apartment', 'house', 'villa', 'townhouse', 'studio', 'penthouse'][Math.floor(Math.random() * 6)],
        
        // ‚úÖ FIXED: Details object based on schema
        details: {
          area: Math.floor(Math.random() * 200) + 50,
          bedrooms: Math.floor(Math.random() * 4) + 1,
          bathrooms: Math.floor(Math.random() * 3) + 1,
          floors: Math.floor(Math.random() * 3) + 1,
          parking: Math.random() > 0.5,
          balcony: Math.random() > 0.7,
          direction: ['North', 'South', 'East', 'West'][Math.floor(Math.random() * 4)]
        },
        
        // ‚úÖ Also add these fields directly (schema has both)
        area: Math.floor(Math.random() * 200) + 50,
        bedrooms: Math.floor(Math.random() * 4) + 1,
        bathrooms: Math.floor(Math.random() * 3) + 1,
        
        // ‚úÖ FIXED: Images as simple string array
        images: [
          `https://picsum.photos/800/600?random=${i}`,
          `https://picsum.photos/800/600?random=${i + 100}`,
          `https://picsum.photos/800/600?random=${i + 200}`
        ],
        
        // ‚úÖ Single image field
        image: `https://picsum.photos/800/600?random=${i}`,
        
        features: ['ƒêi·ªÅu h√≤a', 'T·ªß l·∫°nh', 'M√°y gi·∫∑t', 'WiFi', 'B·∫£o v·ªá 24/7'],
        amenities: ['H·ªì b∆°i', 'Gym', 'Thang m√°y', 'B·∫£o v·ªá 24/7'],
        
        // ‚úÖ CRITICAL: Set featured flags
        isFeatured: i <= 25,
        featured: i <= 25,
        isActive: true,
        // ‚úÖ FIXED: Use valid enum values for status
        status: ['available', 'sold', 'rented', 'pending'][Math.floor(Math.random() * 4)],
        views: Math.floor(Math.random() * 1000),
        propertyType: ['apartment', 'house', 'villa'][Math.floor(Math.random() * 3)],
        
        owner: users[Math.floor(Math.random() * users.length)]._id,
        agent: users[1]._id, // Agent user
        
        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),
        updatedAt: new Date()
      })
    }

    const createdProperties = await Property.insertMany(properties)
    console.log(`‚úÖ Seeded ${createdProperties.length} properties (${createdProperties.filter(p => p.isFeatured).length} featured)`)

    // ‚úÖ Seed FeaturedProjects - SIMPLIFIED APPROACH
    const projects = []
    for (let i = 1; i <= 20; i++) {
      projects.push({
        title: `D·ª± √°n ${i}`,
        name: `D·ª± √°n b·∫•t ƒë·ªông s·∫£n ${i}`,
        description: `M√¥ t·∫£ chi ti·∫øt d·ª± √°n b·∫•t ƒë·ªông s·∫£n s·ªë ${i} v·ªõi ƒë·∫ßy ƒë·ªß ti·ªán √≠ch hi·ªán ƒë·∫°i.`,
        
        // ‚úÖ Location structure
        location: {
          city: Math.random() > 0.5 ? 'TP.HCM' : 'H√† N·ªôi',
          district: `Qu·∫≠n ${Math.floor(Math.random() * 12) + 1}`,
          address: `ƒê·ªãa ch·ªâ d·ª± √°n ${i}`,
          coordinates: {
            lat: 10.7 + Math.random() * 0.1,
            lng: 106.7 + Math.random() * 0.1
          }
        },
        
        // ‚úÖ Pricing structure
        pricing: {
          priceFrom: Math.floor(Math.random() * 5000000000) + 1000000000,
          priceTo: Math.floor(Math.random() * 10000000000) + 5000000000
        },
        
        // ‚úÖ Direct price fields
        price: Math.floor(Math.random() * 8000000000) + 2000000000,
        priceFrom: Math.floor(Math.random() * 5000000000) + 1000000000,
        priceTo: Math.floor(Math.random() * 10000000000) + 5000000000,
        
        // ‚úÖ Developer structure
        developer: {
          name: `Ch·ªß ƒë·∫ßu t∆∞ ${i}`,
          description: `C√¥ng ty ph√°t tri·ªÉn b·∫•t ƒë·ªông s·∫£n uy t√≠n ${i}`
        },
        
        // ‚úÖ Details structure
        details: {
          totalArea: Math.floor(Math.random() * 100000) + 10000,
          floors: Math.floor(Math.random() * 50) + 10,
          blocks: Math.floor(Math.random() * 10) + 2,
          totalApartments: Math.floor(Math.random() * 500) + 100
        },
        
        apartments: Math.floor(Math.random() * 500) + 100,
        area: Math.floor(Math.random() * 100000) + 10000,
        
        // ‚úÖ ONLY use single image field
        image: `https://picsum.photos/1200/800?random=${i + 500}`,
        
        amenities: ['H·ªì b∆°i', 'Gym', 'S√¢n ch∆°i tr·∫ª em', 'Si√™u th·ªã', 'B·∫øn xe'],
        
        // ‚úÖ Valid enum status
        status: ['planning', 'under-construction', 'completed', 'selling'][Math.floor(Math.random() * 4)],
        
        // ‚úÖ Featured flags
        isFeatured: i <= 12,
        featured: i <= 12,
        views: Math.floor(Math.random() * 2000),
        
        createdAt: new Date(Date.now() - Math.random() * 60 * 24 * 60 * 60 * 1000),
        updatedAt: new Date()
      })
    }

    const createdProjects = await FeaturedProject.insertMany(projects)
    console.log(`‚úÖ Seeded ${createdProjects.length} projects (${createdProjects.filter(p => p.isFeatured).length} featured)`)

    // ‚úÖ Seed News - FIXED with correct category enum
    const newsArticles = []
    for (let i = 1; i <= 30; i++) {
      newsArticles.push({
        title: `Tin t·ª©c b·∫•t ƒë·ªông s·∫£n ${i}`,
        content: `N·ªôi dung chi ti·∫øt c·ªßa b√†i vi·∫øt tin t·ª©c b·∫•t ƒë·ªông s·∫£n s·ªë ${i}. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.`,
        excerpt: `T√≥m t·∫Øt n·ªôi dung b√†i vi·∫øt s·ªë ${i}`,
        description: `M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ b√†i vi·∫øt s·ªë ${i}`,
        
        // ‚úÖ FIXED: Use actual valid enum values from schema
        category: ['Th·ªã tr∆∞·ªùng', 'Ph√¢n t√≠ch', 'Ph√°p l√Ω', 'D·ª± √°n', 'Tin t·ª©c', 'market-update', 'investment-tips', 'legal-news'][Math.floor(Math.random() * 8)],
        tags: ['bat-dong-san', 'dau-tu', 'thi-truong'],
        
        // ‚úÖ Image fields
        image: `https://picsum.photos/800/500?random=${i + 800}`,
        thumbnail: `https://picsum.photos/400/300?random=${i + 900}`,
        
        // ‚úÖ CRITICAL: Set featured and published flags
        isFeatured: i <= 15,
        isPublished: true,
        views: Math.floor(Math.random() * 5000),
        likes: Math.floor(Math.random() * 100),
        readTime: Math.floor(Math.random() * 10) + 3,
        
        author: users[Math.floor(Math.random() * users.length)]._id,
        publishedAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),
        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),
        updatedAt: new Date()
      })
    }

    const createdNews = await News.insertMany(newsArticles)
    console.log(`‚úÖ Seeded ${createdNews.length} news articles (${createdNews.filter(n => n.isFeatured).length} featured)`)

    // Final summary
    const summary = {
      users: users.length,
      properties: {
        total: createdProperties.length,
        featured: createdProperties.filter(p => p.isFeatured).length,
        sale: createdProperties.filter(p => p.type === 'sale').length,
        rent: createdProperties.filter(p => p.type === 'rent').length
      },
      projects: {
        total: createdProjects.length,
        featured: createdProjects.filter(p => p.isFeatured).length
      },
      news: {
        total: createdNews.length,
        featured: createdNews.filter(n => n.isFeatured).length
      }
    }

    console.log('üéâ Database seeding completed successfully!', summary)

    res.json({
      success: true,
      message: 'Database seeded successfully',
      data: summary
    })

  } catch (error) {
    console.error('‚ùå Error seeding database:', error)
    res.status(500).json({
      success: false,
      message: 'Failed to seed database',
      error: error.message
    })
  }
})

// GET /api/seed/status - Get seeding status
router.get('/status', async (req, res) => {
  try {
    const [userCount, propertyCount, projectCount, newsCount] = await Promise.all([
      User.countDocuments(),
      Property.countDocuments(),
      FeaturedProject.countDocuments(),
      News.countDocuments()
    ])

    res.json({
      success: true,
      data: {
        users: userCount,
        properties: propertyCount,
        projects: projectCount,
        news: newsCount,
        hasData: userCount > 0 || propertyCount > 0 || projectCount > 0 || newsCount > 0
      }
    })
  } catch (error) {
    console.error('‚ùå Error getting seed status:', error)
    res.status(500).json({
      success: false,
      message: 'Failed to get seed status',
      error: error.message
    })
  }
})

module.exports = router