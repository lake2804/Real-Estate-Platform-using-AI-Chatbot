export const usePropertyChat = () => {
  const chatStore = useChatStore()
  const authStore = useAuthStore()

  // Start chat from property detail
  const startChatFromProperty = async (propertyData) => {
    console.log('üîß Starting chat from property:', propertyData)

    // Check authentication
    if (!authStore.currentUser) {
      console.log('‚ö†Ô∏è User not authenticated, redirecting to login')
      await navigateTo('/login')
      throw new Error('User not authenticated')
    }

    // Check if trying to chat with self
    if (authStore.currentUser.id === propertyData.ownerId) {
      console.log('‚ö†Ô∏è Cannot chat with self')
      throw new Error('Kh√¥ng th·ªÉ nh·∫Øn tin v·ªõi ch√≠nh m√¨nh!')
    }

    try {
      // Initialize chat if not already initialized
      if (!chatStore.isConnected) {
        console.log('üîß Initializing chat store...')
        await chatStore.initChat()
      }

      // Create or get conversation via API
      console.log('üîß Creating/getting conversation via API...')
      const conversation = await chatStore.createConversationFromProperty({
        id: propertyData.id,
        title: propertyData.title,
        ownerId: propertyData.ownerId,
        ownerName: propertyData.ownerName,
        ownerAvatar: propertyData.ownerAvatar
      })

      console.log('‚úÖ API conversation created/found:', conversation._id)

      // Set as active conversation
      if (conversation) {
        chatStore.setActiveConversation(conversation._id)
        console.log('‚úÖ Set active conversation:', conversation._id)
      }

      return conversation

    } catch (error) {
      console.error('‚ùå Error starting chat from property:', error)
      throw error
    }
  }

  // Schedule viewing
  const scheduleViewing = async (propertyData) => {
    console.log('üîß Scheduling viewing for property:', propertyData)

    try {
      // Start chat first
      const conversation = await startChatFromProperty(propertyData)

      // Send scheduling message
      const schedulingMessage = `Ch√†o ${propertyData.ownerName}, t√¥i mu·ªën h·∫πn l·ªãch xem nh√† "${propertyData.title}". B·∫°n c√≥ th·ªÉ s·∫Øp x·∫øp th·ªùi gian ph√π h·ª£p kh√¥ng?`
      
      if (conversation && chatStore.activeConversation) {
        await chatStore.sendMessage(chatStore.activeConversation, schedulingMessage)
      }

      // Navigate to chat
      await navigateTo('/contact')

    } catch (error) {
      console.error('‚ùå Error scheduling viewing:', error)
      throw error
    }
  }

  // Quick contact
  const quickContact = async (propertyData, message = '') => {
    console.log('üîß Quick contact for property:', propertyData)

    try {
      // Start chat first
      const conversation = await startChatFromProperty(propertyData)

      // Send initial message if provided
      if (message && conversation && chatStore.activeConversation) {
        await chatStore.sendMessage(chatStore.activeConversation, message)
      }

      // Navigate to chat
      await navigateTo('/contact')

    } catch (error) {
      console.error('‚ùå Error in quick contact:', error)
      throw error
    }
  }

  return {
    startChatFromProperty,
    scheduleViewing,
    quickContact
  }
}